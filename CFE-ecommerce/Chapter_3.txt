Templates
- eliminate repetitiveness in HTML documents

=====================

Base Template

base.html -> main spot where all of our content will inherit from

extends tag

=====================

Include Tag

- include other html p[ages into your HTML page

=====================

Pass arguments with include

- passing variables along with the include tag
- these variables can be actual context dictionary variables

Example:
{% include "base/navbar.html" with brand_name="eCommerce"%}


=====================

Reusable Live Snippets


Bootstrap Cards

-> Similar to include with tag

=====================


Reverse for URLs

reverse -> works in templates
reverse -> also works in models

Templates
- You can do something like:
<a href="{% url 'detail' slug=instance.slug%}" class="btn btn-warning">URL shortcut</a>

and teh actual URL could be:
re_path(r"^(?P<slug>[\w-]+)/$", ProductDetailSlugView.as_view(), name="detail")

In Models:
def get_absolute_url(self):
	# return f"/products/{self.slug}"
	return reverse("detail", kwargs={"slug": self.slug})


But, you should add namespacing here

=====================

Navbar


URL shortcut names
{% url "home" as home_url %}


<li class="nav-item {% if request.path == home_url %}active{% endif %}">
        <a class="nav-link" href="{{ home_url }}">Home <span class="sr-only">(current)</span></a>
</li>


=====================

Template Filters

Example
- {{ instance.description| truncatewords:12 }}


- Can chain template filters
{{ instance.description| linebreaks | truncatewords:12 }}

title -> titles it out


# Adding the timestamp to the product
# auto_now_add=True -> means that when we save this field into the database
# this field will be set for us automatically
timestamp = models.DateTimeField(auto_now_add=True)


{{ object.timestamp | timesince }} ago -> timesince is the filter here

=====================

For Loop and Counter Cycle

{% cycle %} can be used in conjuction with the for loop

{{ forloop.counter }}

{%  if  forloop.counter|divisibleby:2%}


Example:
<div class="container">
        <div class="row">
            {% for object in object_list %}
            <div class="col">
                {% include "products/snippets/card.html" with instance=object%}
                {% if forloop.counter|divisibleby:2 %}
                    </div> </div> <div class="row"> <div class="col-lg-12"><hr/></div>
                {% else %}
                    </div>
                {% endif %}

            {% endfor %}
        </div>
    </div>
	
The first </div> in the if condition closes the "col" tag
The second </div> closes the "row" tag
A new "row" tag is created.
The <hr/> tag is just to create a line

=====================

