Checkout Process

- Guest User or Authenticated User? -> Handle this

1) Cart -> Checkout View
	? 
	- Login or Enter email as guest
	- Shipping Address
	- Billing Info
		- Billing Address
		- Credit Card / Payment

2) Billing App
	- Billing Profile( associated to a user or an email)
		- generate payment processor token( Stripe or Braintree )

3) Order / Invoices Component
	- Connecting the billing profile
	- Shipping / Billing
	- Status -> Shipped / Cancelled?
	


========================


Order Component

Cart prepares the order and the actual order is handled in the "orders" app

cart = models.ForeignKey(Cart)

# billing_profile = ?
    # shipping_address = ?
    # billing_address = ?

    # Assign a random of strings / numbers which represents this order to the customer
    # pk / id
    order_id = models.CharField(max_length=120, blank=True)
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    status = models.CharField(max_length=120, default="created", choices=ORDER_STATUS_CHOICES)

    shipping_total = models.DecimalField(default=5.99, max_digits=100, decimal_places=2)
    order_total = models.DecimalField(default=0.00, max_digits=100, decimal_places=2)

    def __str__(self):
        return self.order_id
		
========================

Generate the order ID


Order ID -> Random, Unique ( has to be, is a must)


def pre_save_create_order_id(sender, instance, *args, **kwargs):
    if not instance.order_id:
        instance.order_id = unique_order_id_generator(instance)


pre_save.connect(pre_save_create_order_id, sender=Order)


========================

Calculate the order total

How?
- Based off of Cart
- When the cart changes the order changes
- When the cart has been updated, our order should change


- USE THE POST_SAVE function

========================

Checkout View

- Checkout Button in our view

We will put the view in the "carts" app not the "order"


order_obj, new_order_obj = Order.objects.get_or_create() 
get_or_create() -> is a method built-in


========================

Math with Decimals and Floats in Python


========================

Upgrading Auth to prep for Checkout

python manage.py startapp accounts -> All our logging and registering of the users will be handled here

On checkout page:
	-> If user successfully logs in / successfully registers -> redirect back to checkout page
	
Way 1)
Get the redirect URL
next_ = request.GET.get("next")
next_post = request.POST.get("next")

from django.utils.http import is_safe_url


========================


Billing Profile

- Asscoiated with a guest user / authenticated user
- 1 uniform thing

- New app billing
- App -> 1 thing and 1 thing well

Billing Profile and Transactions


Ok, how does a signal work?

def user_created_receiver(sender, instance, created, *args, **kwargs):
    # Whenever a user is created a billing profile is created through this signal
    if created:
        BillingProfile.objects.get_or_create(user=instance)


post_save.connect(user_created_receiver, sender=User)


User = settings.AUTH_USER_MODEL

Django emits signals when something is change in the database
So we are listening when a "User" is saved to the database(sender=User)

We have a receiver ready, which checks if the "User" instance is created
if created:
	# Create a billing profile for that instance of the user
	
========================

Billing profile in Checkout View

- Implementing billing profile for logged-in user or a guest user


In checkout.html

{% include "accounts/snippets/form.html" with form=login_form next=request.build_absolute_uri%}{% extends "base.html" %}

{% block content %}
{% if not billing_profile %}
    <div class="row text-center">
        <div class="col-12 col-md-6">
            <p class="lead">Login</p>
            {% include "accounts/snippets/form.html" with form=login_form next_url=request.build_absolute_uri%}
        </div>
        <div class="col-12 col-md-6">
            <p class="lead">Continue As Guest</p>
        </div>
    </div>
{% else %}
    <h1>Checkout</h1>
    <p>Cart Total {{ object.cart.total }}</p>Login
    <p>Shipping Total {{ object.shipping_total }}</p>
    <p>Total {{ object.total }}</p>
{% endif %}
{% endblock %}



def checkout_home(request):
    cart_obj, cart_created = Cart.objects.new_or_get(request)
    order_obj = None

    if cart_created or cart_obj.products.count() == 0:
        # Means that the cart is created in this view
        # Cart initially did not exist
        # We want cart to handle this
        # We also want to ensure that there are no products in the cart
        return redirect("carts:home")
    else:
        order_obj, new_order_obj = Order.objects.get_or_create(cart=cart_obj)

    billing_profile = None
    login_form = LoginForm()

    user = request.user
    if user.is_authenticated:
        billing_profile, billing_profile_created = BillingProfile.objects.get_or_create(user=user, email=user.email)

    context = {"object": order_obj, "billing_profile": billing_profile, "login_form": login_form}
    return render(request, "carts/checkout.html", context)

========================

Billing Profile for a Guest user

========================

Associate billing profile to a order

- adjust how our order is being created and calculated based on our billing profile

GNENERAL IDEA:

WE HAVE OUR CART, WE SHOULD CREATE AN ORDER FOR THAT CART UNTIL WE HAVE A BILLING PROFILE

1) Update order based off of billing profile and cart


2) Get rid of guest email ID if you login
	            try:
					del request.session["guest_email_id"]
				except:
					pass

========================

Order Manager

========================

Billing Profile Manager

- Model manager
========================


Addresses app

- Why is this in its own app?
CRUD or Views for Addresses

- Apps -> do 1 thing and 1 thing very well

Address could live in the Order, Account, Billing model
But a BillingProfile can't live in a Address model.


Therefore, address is in its own app

User address ->
relation to User || Billing Profile -> either or

To reduce complexity, related to Billign Profile

When user registers for the 1st time, the address is registered to teh billing profile


- We have to create a form that handles these address
- We have to display this form( Model Form )



ModelForm -> will display a form similar to how a form is displayed by the admin

from django import forms

from .models import Address

class AddressForm(forms.ModelForm):
    class Meta:
        model = Address
		
		
========================

Address app part 2

In case of a model form, you could do something like

instance = form.save(commit=False)
instance.billing_profile = 
instance.save()

This means that you are actually creating the instance by taking all the data form the model form

Once you save the shipping address -> You need to add it to the order

Associate Order to the Shipping address


========================

Associate Orders to Addresses

shipping_address = models.ForeignKey(Address, on_delete=models.CASCADE, null=True, blank=True)
billing_address = models.ForeignKey(Address, on_delete=models.CASCADE, null=True, blank=True)


If we do a python manage.py makemigrations, it gives an error

It is because, there are 2 foreign keys with teh smae assocaition
Database error

Add something called as "related_name"
========================