Custom User Model
==============================

Django's Default User Model
- Many features.
- User name, Password

But we want user's email's as user models.

Customizing Django's user model

==============================

Before we get started:

https://www.codingforentrepreneurs.com/blog/how-to-create-a-custom-django-user-model/

django.contrib.auth
- User model itslef handles the logged-in session

- We are building an e-commerce site
- We want 1 email address for 1 account
- email is unique
- email is the central focus
- Transition away from the username to email

==============================

Create Abstract Base User

Our user model expects more than that provided in models.Model


Put the new custom user model in the accounts app

from django.contrib.auth.models import(
	AbstractBaseUser, 
)

def CustomeUser(AbstractbaseUser):
	pass
	
AbstractBaseUser
- id
- password
- last_login


AbstractUserName creates the above fields, but there is nothing that says what is the user name

email = models.EmailField()
USERNAME_FIELD = 'email'

admin = models.BooleanField(default=False)  -> Super user
staff = models.BooleanField(default=False) -> One of the users
active = models.BooleanField(default=False) -> # is the user active -> can login

# email and password are rquired by default field
# Therefore, below
REQUIRED_FIELDS = []

"""
Calling it User because this is the User class now
We are creating our own user and eliminating django's in-built user
"""

class User(AbstractBaseUser):
    email = models.EmailField(
        verbose_name='email address',
        max_length=255,
        unique=True,
    )
    active = models.BooleanField(default=True)
    staff = models.BooleanField(default=False) # a admin user; non super-user
    admin = models.BooleanField(default=False) # a superuser
    # notice the absence of a "Password field", that's built in.

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = [] # Email & Password are required by default.

    def get_full_name(self):
        # The user is identified by their email address
        return self.email

    def get_short_name(self):
        # The user is identified by their email address
        return self.email

    def __str__(self):              # __unicode__ on Python 2
        return self.email

    def has_perm(self, perm, obj=None):
        "Does the user have a specific permission?"
        # Simplest possible answer: Yes, always
        return True

    def has_module_perms(self, app_label):
        "Does the user have permissions to view the app `app_label`?"
        # Simplest possible answer: Yes, always
        return True

    @property
    def is_staff(self):
        "Is the user a member of staff?"
        return self.staff

    @property
    def is_admin(self):
        "Is the user a admin member?"
        return self.admin

    @property
    def is_active(self):
        "Is the user active?"
        return self.active

==============================

Create the user model manager

BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, email, password=None):
        """
        Creates and saves a User with the given email and password.
		This method takes in all teh required fields
        """
        if not email:
            raise ValueError('Users must have an email address')

        user = self.model(
            email=self.normalize_email(email),
        )

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_staffuser(self, email, password):
        """
        Creates and saves a staff user with the given email and password.
        """
        user = self.create_user(
            email,
            password=password,
        )
        user.staff = True
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password):
        """
        Creates and saves a superuser with the given email and password.
        """
        user = self.create_user(
            email,
            password=password,
        )
        user.staff = True
        user.admin = True
        user.save(using=self._db)
        return user

==============================

Change Default User model to our Custom User Model


In settings.py

AUTH_USER_MODEL = 'accounts.USER' 


Unique Constraint Failed

- Changing user model caused issues in teh Billing Model
- This is becuase of the various signals that we have


- Solution 1: Delete dB
- backup your product data


==============================

Reload databases with fixtures

fixtures -> Save our prexisting data from our database
clean out our database
And reload


In products folder create a sub folder called as "fixtures"

>>> python manage.py dumpdata products.Product --format json --indent 4 > products/fixtures/products.json


where products.Product -> app name and the model name



Now delete the migratiosn from the accounts app
Rename teh db.sqlite3 file to db2.sqlite3


>>> python manage.py makemigrations
>>> python manage.py migrate

Now you have all the product data
Its time to load this data

Try creating super user now
WORKS

==============================

Forms and Admin for our custom user

In accounts/admin.py

class UserAdmin(admin.ModelAdmin):
    search_fields = ["email"]
    class Meta:
        model = User




This will add search facility in the admin

==============================

Add a erquired field to the model

