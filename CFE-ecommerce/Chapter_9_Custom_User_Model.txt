Custom User Model
==============================

Django's Default User Model
- Many features.
- User name, Password

But we want user's email's as user models.

Customizing Django's user model

==============================

Before we get started:

https://www.codingforentrepreneurs.com/blog/how-to-create-a-custom-django-user-model/

django.contrib.auth
- User model itslef handles the logged-in session

- We are building an e-commerce site
- We want 1 email address for 1 account
- email is unique
- email is the central focus
- Transition away from the username to email

==============================

Create Abstract Base User

Our user model expects more than that provided in models.Model


Put the new custom user model in the accounts app

from django.contrib.auth.models import(
	AbstractBaseUser, 
)

def CustomeUser(AbstractbaseUser):
	pass
	
AbstractBaseUser
- id
- password
- last_login


AbstractUserName creates the above fields, but there is nothing that says what is the user name

email = models.EmailField()
USERNAME_FIELD = 'email'

admin = models.BooleanField(default=False)  -> Super user
staff = models.BooleanField(default=False) -> One of the users
active = models.BooleanField(default=False) -> # is the user active -> can login

# email and password are rquired by default field
# Therefore, below
REQUIRED_FIELDS = []

"""
Calling it User because this is the User class now
We are creating our own user and eliminating django's in-built user
"""

class User(AbstractBaseUser):
    email = models.EmailField(
        verbose_name='email address',
        max_length=255,
        unique=True,
    )
    active = models.BooleanField(default=True)
    staff = models.BooleanField(default=False) # a admin user; non super-user
    admin = models.BooleanField(default=False) # a superuser
    # notice the absence of a "Password field", that's built in.

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = [] # Email & Password are required by default.

    def get_full_name(self):
        # The user is identified by their email address
        return self.email

    def get_short_name(self):
        # The user is identified by their email address
        return self.email

    def __str__(self):              # __unicode__ on Python 2
        return self.email

    def has_perm(self, perm, obj=None):
        "Does the user have a specific permission?"
        # Simplest possible answer: Yes, always
        return True

    def has_module_perms(self, app_label):
        "Does the user have permissions to view the app `app_label`?"
        # Simplest possible answer: Yes, always
        return True

    @property
    def is_staff(self):
        "Is the user a member of staff?"
        return self.staff

    @property
    def is_admin(self):
        "Is the user a admin member?"
        return self.admin

    @property
    def is_active(self):
        "Is the user active?"
        return self.active

==============================

Create the user model manager





==============================