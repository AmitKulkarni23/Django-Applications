Cart Component

========================

Cart App

-> Will be handling all of the shopping carts for authenticated and non-authenticated users



========================

Django Sessions

Whether you are a logged in user or not when you select
certain products and add them to cart they should be persistent

django.contrib.sessions 

When you go to a website it starts a session
That session expires when the developer says that it expires

Session -> remember things done in a session

Can be used for a user name

Sessions -> based off of your dB.
Sessions are stored in your dB


request.session -> SessionStore

request.session.set_expiry

request.session.session_key


We will be playing around with setting and getting session variables
request.session["first_name"] = "Amit"

In home_view
print(request.session.get("first_name")

Therefore, request.session -> is a dictionary


request.user["user"] = request.user
-> Error: AnonymousUser is not JSON serializable

You can't save actual objects to a session

string, integer

========================

Cart Model

# Create your models here.
class Cart(models.Model):
	# Any user can create a cart( authenticated or non-authenticated)
    user = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE)
    # Have the ability to have a blank cart
	products = models.ManyToManyField(Product, blank=True)
    total = models.DecimalField(default=0.0, max_digits=10, decimal_places=2)
    timestamp = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

Cart for a specific user

from django.conf import settings


========================

Create Cart



def cart_create(user=None):
    print("New cart created")
    cart_obj = Cart.objects.create(user=None)
    return cart_obj


# Create your views here.
def cart_home(request):

    request.session["cart_id"] = "12"
    # We dont want to create a cart if it already exists
    cart_id = request.session.get("cart_id", None)

    qs = Cart.objects.filter(id=cart_id)
    if qs.count() == 1:
        print("Cart exists")
        cart_obj = qs.first()
    else:
        print("Create a new cart")
        cart_obj = cart_create()
        request.session["cart_id"] = cart_obj.id


    # key = request.session.session_key

    # Expire the session key after 300 seconds
    # request.session.set_expiry(300)
    return render(request, "carts/home.html", {})


========================

Model Manager for Cart


class CartManager(models.Manager):
    def new(self, user=None):
        user_obj = None
        if user is not None:
            if user.is_authenticated:
                user_obj = user
        return self.model.objects.create(user=user_obj)
		
		
========================

M2M Changed Signal to calculate Cart total

pre_save.connect method will be called when the user hits save in the admin panel

m2m_changed -> manyToManyChanged

pre_save_cart_receiver(sender, instance, action,  *args, **kwargs) -> This is the signature

Actions:

pre_add
post_add
pre_remove
post_remove


We want to caclulate the total in the Cart on some particular actions(not required for all actions)


def pre_save_cart_receiver(sender, instance, action,  *args, **kwargs):
    print(action)
    if action == "post_add" or action == "post_remove" or action == "post_clear":
        products = instance.products.all()
        total = 0
        for item in products:
            total += item.price

        instance.total = total
        instance.save()


m2m_changed.connect(pre_save_cart_receiver, sender=Cart.products.through)

========================

Cart Update View

- update cart using the frontend -> add / remove products

========================

Add to Cart form

- Add to Cart button -> should toggle
- 1 click add to Cart -> toggle to -> Remove

Add to Cart form -> Inside of Products

csrf -> Cross site request forgery.
True for POST method

POST -> changing stuff in database

========================

Remove Items from Cart Form

========================

Cart Icon & Font Awesome

