Custom Analytics

========================================

Intro
- Understanding our users better
- Info about session
- Get user data as much as we can
- Insights into building a better service
- Can be done using third party, but we will do it internally
- Data is valuable( don't give it away )

========================================

Getting Started

- https://www.codingforentrepreneurs.com/blog/custom-analytics-with-django/#watch

Third party Analytics Tools
- Google Analytics

========================================

Craft the Object Viewed Model

python manage.py startup analytics

class ObjectViewed(models.Model):
    # Even if teh user is not logged in we want to capture info
    # The actual user instance
    user = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)

    # Note: There is an IP Field in Django models
    ip_address = models.CharField(max_length=220, blank=True, null=True)

    # The idea is to get all the models that are present
    # Product, Order, Cart, Address etc..
    # Any of the models mentioned above is captured by content_type
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)

    # The object id of the model captured above
    # user_id, Product_Id, Order_ID
    object_id = models.PositiveIntegerField()

    # We can call this field and get the instance of the model
    content_object = GenericForeignKey('content_type', 'object_id')

    # We want to know when the user viewd a page, therefore we need a timestamp
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return "%s viewed on %s" %(self.content_object, self.timestamp)

    class Meta:
        ordering = ["-timestamp"] # Most recent saved shows up first
        verbose_name = "Object Viewed"
        verbose_name_plural = "Objects Viewed"
		
========================================

Get IP Address of the User

- How to get the IP address of the user?

- Tricky
- depends on how your IP address is set up
- Users can sometimes change their IP addresses so that they are not tracked

def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')

    if x_forwarded_for:
        ip = x_forwarded_for.split(",")[0]
    else:
        ip = request.META.get("REMOTE_ADDR")

    return ip

If these headers are not there then ip will be None

	
========================================

A custom signal

- Builtin-in methods taht allow us to do stuff when other things happen
- When something happens it sends out a signal
- We can create receivers to handle those signals

-> Create our own custom signal for the object being viewed
-> When an object is viewed it will send a signal


-> When an object is viewed not a page is viewed


For each class that we want to be a sender we need to write the signal
Therefore, to avoid such a athing we use something called as a Mixin


from django.dispatch import Signal

object_viewed_signal = Signal(providing_args=['instance', 'request'])


========================================

Object Viewed Mixin

class ObjectViewedMixin(object):
    def get_context_data(self, *args, **kwargs):
        context = super(ObjectViewedMixin, self).get_context_data(*args, **kwargs)
        request = self.request
        instance = context.get("object")
        if instance:
            object_viewed_signal.send(instance.__class__, instance=instance, request=request)

        return context
		
========================================

Handle the Object Viewed Signal

