Chapter 32. In App Templates

------------------------------------

Django loads the templates by looking at the file system Loader and then looks at
our templates directory.

It also tries look at the app directories
i.e. it is looking at the template directories of all apps mentioned in
settings.py - INSTALLED_APPS

You can create a templates folder in your app itself

ballblog
	- blog
		- templates
			- blog
				- detail.html
				- list.html
				- create.html
				- delete.html
				


------------------------------------

Chapter 33. Submit Raw HTML form

What forms do by default? - GET requestif you don't put in the type of method.
Put all of the values in the form into a URL 

POST
Action - what endpoint are you sending it to?

<form method="post" action="/contact/">

OR

<form method="post" action="."> - If "." or empty action then it will submit it to the same view
that is renedering this.

CSRF verification failed - Forbidden (403) - CSRF token missing or incorrect.
Built-in security measure in Django

{% csrf_token %}

If you want to check if the form was submitted and see if the data is being handled by the view/action end-point
print(request.POST) -> This will print out a dictionary.

Instead of a raw form we want to have Django forms handle it for us.

------------------------------------

Chapter 34. A Django Form



class ContactForm(forms.Form):
    full_name = forms.CharField()
    email = forms.EmailField()
    content = forms.CharField(widget=forms.Textarea)
	

def contact_page(request):
    my_title = "Contact Us"
    form = ContactForm(request.POST or None)

    if form.is_valid():
        print(form.cleaned_data)
        form = ContactForm()

    context = {
        "title" : my_title,
        "form" : form,
    }
    return render(request, "form.html", context)
	
------------------------------------

Chapter 35. Saving data from a Django Form

We want to store data in the dB

def blog_post_create_view(request):
    # Create objects
    # How? - use forms
    form = BlogPostForm(request.POST or None)
    if form.is_valid():
        obj = BlogPost.objects.create(**form.cleaned_data)
        form = BlogPostForm()
    template_name = "blog/form.html"
    context = {"form": form}
    return render(request, template_name, context)

------------------------------------

Chapter 36. Model Forms

class BlogPostModelForm(forms.ModelForm):
    # Note: The "title" field in the BlogPost model can be overridden here
    # title = forms.CharField() or title.Textarea()
    class Meta:
        model = BlogPost
        fields = ["title", "slug", "content"]



------------------------------------

Chapter 37. Validate Data on Fields

Form validation

clean_


class ContactForm(forms.Form):
    full_name = forms.CharField()
    email = forms.EmailField()
    content = forms.CharField(widget=forms.Textarea)

    def clean_email(self, *args, **kwargs):
        email = self.cleaned_data.get('email')
        if email.endswith(".edu"):
            raise forms.ValidationError("Not a valid email. Please don't use edu")
        return email
		

class BlogPostModelForm(forms.ModelForm):
    # Note: The "title" field in the BlogPost model can be overridden here
    # title = forms.CharField() or title.Textarea()
    class Meta:
        model = BlogPost
        fields = ["title", "slug", "content"]

    def clean_title(self, *args, **kwargs):
        title = self.cleaned_data.get('title')
        qs = BlogPost.objects.filter(title__iexact=title)
        if qs.exists():
            raise forms.ValidationError("Title already exists")
        return title        


------------------------------------


Chapter 38. Login Required

When we create data:
- we want to prevent who can create blog posts


We can also set where the user should go when he isn't logged in
@login_required("/login")

from django.contrib.admin.views.decorators import staff_member_required
@staff_member_required

------------------------------------

Chapter 39. Associate Blog Post to a User with Foreign keys

Foreign Key - Tie in 1 model with another

from django.conf import settings
User = settings.AUTH_USER_MODEL


on_delete=models.CASCADE
If we delete this user, all the things related to this user in teh model will be deleted.
But we will do a model.SET_NULL


How to work with users on the terminal?
$ python manage.py shell

>>> from django.contrib.auth import get_user_model
user = get_user_model()
>>> j = User.objects.first()

How to get all of j's blogposts?
REVERSE LOOKUP
j.blogpost_set.all() -> Gives us query set related to this user


Why blogspot_set??
class BlogPost(models.Model)

Lowercase the model name and add _set!!

------------------------------------

Chapter 40.
Logged In User & Forms

If @login_required wasn't there and used:
if form.is_valid():
	obj = form.save(commit=False)
	obj.user = request.user # This will throw out an error. It says you cannot assign an anonymous user.
	obj.save()


------------------------------------

Chapter 41. Update View with Model Form

obj = get_object_or_404(BlogPost, slug=slug)
form = BlogPostModelForm(request.POST or None, instance=obj)


We are passing into the form we are adding an "instance"

------------------------------------

Chapter 42. Better Validation on Update Views

def clean_title(self, *args, **kwargs):
	instance = self.instance
	print(instance)
	title = self.cleaned_data.get('title')
	qs = BlogPost.objects.filter(title__iexact=title)
	# We are removing this instance from our queryset
	# We do not want to do this validation on the instance that we chnaging
	if instance:
		qs = qs.exclude(pk=instance.pk)
	if qs.exists():
		raise forms.ValidationError("Title already exists")
	return title
	
------------------------------------

Chapter 43. Delete & Confirm

@staff_member_required
def blog_post_delete_view(request, slug):
    template_name = "blog/delete.html"
    obj = get_object_or_404(BlogPost, slug=slug)
    if request.method == "POST":
        obj.delete()
        # BUT, we want to redirect them to another view
        return redirect("/blog")
    context = {"object": obj}
    return render(request, template_name, context)
	
------------------------------------

Chapter 44. Blog Post Naviagation

We have to update our list view to have links

In our models.py
def get_absolute_url(self):
	return f"blog/{self.slug}"

In list.html
<li><a href="{{ object.get_absolute_url}}">{{ object.title }}</li>

We can do the same for other URLs as well

