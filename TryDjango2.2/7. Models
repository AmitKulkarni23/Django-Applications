Chapter 17. Your first App

--------------------------------

Everything now is static
Static - we declare everything, it is not really being updated / changed by anyone

Django - Dynamic
Having data stored in a dB that we can add to and we can actually see

settings.py
INSTALLED_APPS

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

What if we wanted to add our own thing?
Apps - Think of them as components - little pieces that buold up the Django project as a whole.


$ python manage.py startapp blog

src
- ballblog
	- ballblog
		- init.py
		- settings.py
		- views.py
		- urls.py
		- wsgi.py
	- blog
		- migrations/
		- admin.py
		- apps.py
		- models.py
		- tests.py
		- views.py
	- templates
	manage.py
	db.sqlite3


Main files in app
models.py - Store datta in a dB
views.py
admin.py

from django.db import models
models.py

class BlogPost(models.Model):
	title = models.TextField()
	
2 things
- Make sure your app is present in settings.py
- Run migrations

$ python manage.py makemigrations
$ python manage.py migrate

Above 2 commands -> whatever is in our model will be in our dB

--------------------------------



--------------------------------

Chapter 19.
Model to Django Admin

How do you bring your BlogPost into the admin?

\src\ballblog\blog\admin.py

from .models import BlogPost
admin.site.register(BlogPost)


Model -> don't name it plural
Because you will have a lot of instances.


Get all objects present in the dB
obj = BlogPost.objects.get(title="hello World")


obj.id -> is built into all the objects


--------------------------------

Chapter 20. Model in a View

obj = BlogPost.objects.get(id=1)


def blog_post_detail_page(request):
    template_name = "blog_post_detail.html"
    context = {"object": obj}
    return render(request, template_name, context)



--------------------------------

Chaper 21.Dynamic URL based lookups

We want to have a dynamic URL
path("/blog/<int:post_id>/", blog_post_detail) - This actually passes in an additional argument to your view

def blog_post_detail_page(request, post_id)


--------------------------------

Chapter 22. Handling Dynamic URL Errors

DoesNotExist, ValueError

try:
	obj = BlogPost.objects.get(id=post_id)
except:
	raise Http404
		
Another Way:
try:
	obj = BlogPost.objects.get(id=post_id)
except BlogPost.DoesNotExist:
	raise Http404
except ValueError:
	raise Http404
	
	
Shortcut Way
Get Object or 404


def blog_post_detail_page(request, post_id):
    obj = get_object_or_404(BlogPost, id=post_id)
    template_name = "blog_post_detail.html"
    context = {"object": obj}
    return render(request, template_name, context)


Chapter 25. A New database lookup value
Instead of http://127.0.0.1:8000/blog/1/
we want to do a lookup by blog name
http://127.0.0.1:8000/blog/my-blog-post/

We need to adjust how our view will lookup data in the database.

SLUG
Slug is a URL encoded value

In models.py
slug = models.SlugField()

If you do python manage.py makemigrations, Django will throw an error/warning.

You are adding a non-null field to your model.
What should be value of such newly added field for existing objects.

slug = models.SlugField(null=True)
OR
slug = models.SlugField(default="this-is-myslug")


def blog_post_detail_page(request, slug):
    obj = get_object_or_404(BlogPost, slug=slug)

path('blog/<str:slug>/', blog_post_detail_page),

--------------------------------

Chapert 25. Query Set Lookups

If you do obj = get_object_or_404(BlogPost, slug=slug), you might get a MultipleObjectsReturned error.

GET -> returns 1 object
filter -> []

qs = BlogPost.objects.filter(slug=slug)
qs.first() OR qs.last() or qs[1]

QuerySet account for slug being a problem



Chapter 26. A unique slug
models.SlugField(unique=True)

--------------------------------

Chapter 27. CRUD & Views

"GET /blog/hello-world-2/ HTTP/1.1"

Django checks for this request in urls.py
Sends the request to the appropriate view
The view sends in a response

request.method
request.path
request.user


CRUD
Create
Retrieve
Update
Delete

GET - Retrieve
POST - to create things. Create/Update/Delete

For example, when you submit a form on the Django admin you send in a POST request.


Chapter. 28 CRUD View Outline

--------------------------------

Chapter 29. Blog Post List View

# get all of the objects in the database
qs = BlogPost.objects.all() # List of python objects


--------------------------------

Chapter 30. Routing the Views


Chapter 31 . Include URLs
Each App - should do one thing and one thing really well
App - Each app should be pluggable

Note: Admin is pluggable
Admin URLS do not bloat your urls.py file.

In blog/ -> Create a new file called urls.py. Add urlpatterns related to blog:
urlpatterns = [
    path('', blog_post_list_view),
    path('<str:slug>/', blog_post_detail_view),
    path('<str:slug>/edit/', blog_post_update_view),
    path('<str:slug>/delete/', blog_post_delete_view),
]


In ballblog/urls.py - (This is your main urls file)
path("blog/", include("blog.urls")),

--------------------------------