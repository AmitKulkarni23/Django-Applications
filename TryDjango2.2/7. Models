Chapter 17. Your first App

--------------------------------

Everything now is static
Static - we declare everything, it is not really being updated / changed by anyone

Django - Dynamic
Having data stored in a dB that we can add to and we can actually see

settings.py
INSTALLED_APPS

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

What if we wanted to add our own thing?
Apps - Think of them as components - little pieces that buold up the Django project as a whole.


$ python manage.py startapp blog

src
- ballblog
	- ballblog
		- init.py
		- settings.py
		- views.py
		- urls.py
		- wsgi.py
	- blog
		- migrations/
		- admin.py
		- apps.py
		- models.py
		- tests.py
		- views.py
	- templates
	manage.py
	db.sqlite3


Main files in app
models.py - Store datta in a dB
views.py
admin.py

from django.db import models
models.py

class BlogPost(models.Model):
	title = models.TextField()
	
2 things
- Make sure your app is present in settings.py
- Run migrations

$ python manage.py makemigrations
$ python manage.py migrate

Above 2 commands -> whatever is in our model will be in our dB

--------------------------------

Chapter 19.
Model to Django Admin

How do you bring your BlogPost into the admin?

\src\ballblog\blog\admin.py

from .models import BlogPost
admin.site.register(BlogPost)


Model -> don't name it plural
Because you will have a lot of instances.


Get all objects present in the dB
obj = BlogPost.objects.get(title="hello World")


obj.id -> is built into all the objects


--------------------------------

Chapter 20. Model in a View

obj = BlogPost.objects.get(id=1)


def blog_post_detail_page(request):
    template_name = "blog_post_detail.html"
    context = {"object": obj}
    return render(request, template_name, context)



--------------------------------

Chaper 21.Dynamic URL based lookups

We want to have a dynamic URL
path("/blog/<int:post_id>/", blog_post_detail) - This actually passes in an additional argument to your view

def blog_post_detail_page(request, post_id)


--------------------------------