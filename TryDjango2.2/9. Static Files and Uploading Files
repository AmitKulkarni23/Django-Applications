Chapter 48. Publish Date, TimeStamp & Updated

publish_date = models.DateTimeField()

timestamp = models.DateTimeField(auto_now_add=True)

auto_now_add -> When you create this in the database this field gets changed
updated = models.DateTimeField(auto_now=True)

auto_now -> Whenever you hit save/update it this will change

class Meta:
	ordering = ["-publish_date", "updated", "timestamp"]

This is how you order your blog posts
(- -> is the negative sign here )
	

--------------------------------------

Chapter 49. Model Managers and Custom Query Sets

So we have a lot of blog posts that haven't been published.
We need to eliminate those from being displayed.

class BlogPostQuerySet(models.QuerySet):
    def published(self):
        now = timezone.now()
        # get_queryset is equivalent to BlogPost.objects
        return self.filter(publish_date__lte=now)


class BlogPostManager(models.Manager):
    def get_queryset(self):
        return BlogPostQuerySet(self.model, using=self._db)


# Create your models here.
class BlogPost(models.Model):
    user = models.ForeignKey(User, null=True, on_delete=models.SET_NULL)
    title = models.CharField(max_length=120)
    content = models.TextField(null=True, blank=True)
    slug = models.SlugField(unique=True)
    publish_date = models.DateTimeField(auto_now=False, auto_now_add=False, null=True, blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

    objects = BlogPostManager()

blog/views.py
def blog_post_list_view(request):
    # Can list out objects
    # Can also be a search view
    # get all of the objects in the database
    qs = BlogPost.objects.published()

    template_name = "blog/list.html"
    context = {"object_list": qs}
    return render(request, template_name, context)


--------------------------------------

Chapter 50. Published & Draft Posts


What if I am logged in and I want to see all posts irrespective of whether I am logged-in or not?

1st way:
def blog_post_list_view(request):
    qs = BlogPost.objects.all().published()
    if request.user.is_authenticated:
        qs = BlogPost.objects.filter(user=request.user)
    template_name = "blog/list.html"
    context = {"object_list": qs}
    return render(request, template_name, context)



2nd way:

if request.user.is_authenticated:
	my_qs = BlogPost.objects.filter(user=request.user)
	qs = (qs | my_qs).disntict()



--------------------------------------

Chapter 51. Static Files and Uploading Files

Upload items to my logpost images/files etc..

Step1 - Setting up settings.py
STATIC_URL = '/static/' 

CSS, JS - that you need Django to reference.

LOCAL_STATIC_CDN_PATH = os.path.join(os.path.dirname(BASE_DIR), "static_cdn_test")
STATIC_ROOT = os.path.join(LOCAL_STATIC_CDN_PATH, "static") # AWS S3, live CDN
STATICFILES_DIRS = [
    # Local version of static files
    # Where you make some changes and later will be uploaded
    # to your static root
    os.path.join(BASE_DIR, 'staticfiles')
]

MEDIA_ROOT = os.path.join(LOCAL_STATIC_CDN_PATH, "media")
MEDIA_URL = "/media/"

class BlogPost(models.Model):
	...
	...
	image = models.FileField(upload_to='image/', blank=True, null=True)
	
When you upload an image from the admin, it goes to MEDIA_ROOT

--------------------------------------

Chapter 52. Image Field and Uploading Images

Change file field to an image field
$ pip install pillow

pillow -> Python image library


class BlogPostModelForm(forms.ModelForm):
    # Note: The "title" field in the BlogPost model can be overridden here
    # title = forms.CharField() or title.Textarea()
    class Meta:
        model = BlogPost
        fields = ["title", "slug", "image", "content", "publish_date"]
		
But in our form.html we will do
<form method="POST" action="." enctype="multipart/form-data"> {% csrf_token %}

enctype - let's you specify the endocing type for your form.


In views.py
def blog_post_create_view(request):
	form = BlogPostModelForm(request.POST or None, request.FILES or None)

In list_inline.html
{% if blog_post.image %}
	<img src="{{ blog_post.image.url}}" class="card-img-top">
{% endif %}

--------------------------------------

Chapter 53. Putting it all together
Seacrh

- Will have some sort of query
- When you search it, it should go to it's own view
- A question mark was added to the URL

def search_view(request):
    print("Coming here")
    template_name = "searches/view.html"
    query = request.GET.get('q', None)
    user = None
    if request.user.is_authenticated:
        user = request.user

    SearchQuery.objects.create(user=user, query=query)
    context = {"query": query}
    return render(request, template_name, context)
	
--------------------------------------

Chapter 54. Complex Lookups
